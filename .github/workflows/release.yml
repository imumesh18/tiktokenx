name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: generate_notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # Generate changelog
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "" >> release_notes.md
            echo "This is the first release of tiktoken-rs, a high-performance Rust implementation of OpenAI's tiktoken library." >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "## Features" >> release_notes.md
          echo "- ðŸš€ High-performance Rust implementation" >> release_notes.md
          echo "- ðŸ”„ Full compatibility with OpenAI's tiktoken" >> release_notes.md
          echo "- ðŸ“¦ Support for all OpenAI model encodings" >> release_notes.md
          echo "- ðŸ¦€ Pure Rust with minimal dependencies" >> release_notes.md
          echo "- ðŸ§ª Comprehensive test suite" >> release_notes.md
          echo "- ðŸ”§ Pluggable architecture for multiple vendors" >> release_notes.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-stable-
            ${{ runner.os }}-cargo-

      - name: Verify version matches tag
        run: |
          CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          TAG_VERSION="${{ needs.create-release.outputs.version }}"
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "Version mismatch: Cargo.toml has $CARGO_VERSION, tag has $TAG_VERSION"
            exit 1
          fi

      - name: Run tests
        run: cargo test --all-features

      - name: Check documentation
        run: cargo doc --no-deps --all-features

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  build-binaries:
    name: Build release binaries
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: tiktoken-rs-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: tiktoken-rs-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: tiktoken-rs-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: tiktoken-rs-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: tiktoken-rs-windows-x86_64.exe

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env
          rustup target add ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.target }} --bin tiktoken-rs || echo "No binary target configured"

      - name: Create example binary (if no main binary exists)
        if: matrix.os != 'windows-latest'
        run: |
          # Create a simple CLI example if no main binary exists
          mkdir -p target/${{ matrix.target }}/release/
          cat > example.rs << 'EOF'
          use tiktoken_rs::{get_encoding, encoding_for_model};

          fn main() {
              let args: Vec<String> = std::env::args().collect();
              if args.len() < 2 {
                  println!("Usage: {} <text>", args[0]);
                  return;
              }

              let text = &args[1];
              match get_encoding("cl100k_base") {
                  Ok(enc) => {
                      let tokens = enc.encode_ordinary(text);
                      println!("Text: {}", text);
                      println!("Tokens: {:?}", tokens);
                      println!("Token count: {}", tokens.len());
                  }
                  Err(e) => eprintln!("Error: {}", e),
              }
          }
          EOF
          rustc --edition 2024 -L target/${{ matrix.target }}/release/deps example.rs -o target/${{ matrix.target }}/release/${{ matrix.artifact_name }} --extern tiktoken_rs=target/${{ matrix.target }}/release/libtiktoken_rs.rlib || echo "Could not build example"

      - name: Upload binary
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/octet-stream

  update-docs:
    name: Update documentation
    runs-on: ubuntu-latest
    needs: [create-release, publish-crate]
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-stable-
            ${{ runner.os }}-cargo-

      - name: Build documentation
        run: cargo doc --no-deps --all-features

      - name: Prepare documentation for GitHub Pages
        run: |
          mkdir -p gh-pages/docs/${{ needs.create-release.outputs.version }}
          cp -r target/doc/* gh-pages/docs/${{ needs.create-release.outputs.version }}/
          cd gh-pages/docs
          ln -sf ${{ needs.create-release.outputs.version }} latest
          echo '<meta http-equiv="refresh" content="0; url=docs/latest/tiktoken_rs/">' > ../index.html

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v5
        with:
          name: github-pages
          path: gh-pages/
